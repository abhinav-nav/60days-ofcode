
Day 25: Dynamic Programming

1. Problem: Maximum Subarray

Problem Statement:
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Input:
An integer array nums.

Output:
The largest sum of any contiguous subarray.

Example:
Input:
nums = [-2,1,-3,4,-1,2,1,-5,4]
Output:
6
Explanation: [4,-1,2,1] has the largest sum = 6.

2. Problem: Unique Paths II

Problem Statement:
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and space are marked as 1 and 0 respectively in the grid.

Input:
A 2D array obstacleGrid representing the grid where obstacleGrid[i][j] = 0 or 1.

Output:
The number of unique paths, considering the obstacles.

Example:
Input:
obstacleGrid = [
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output:
2
Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right

3. Problem: Best Time to Buy and Sell Stock III

Problem Statement:
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Input:
An array prices where prices[i] is the price of the stock on the ith day.

Output:
The maximum profit.

Example:
Input:
prices = [3,3,5,0,0,3,1,4]
Output:
6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

