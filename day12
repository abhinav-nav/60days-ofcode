
 Day 12: Trees and Graphs

1. Problem: Binary Tree Traversal

Problem Statement:
Implement functions to perform in-order, pre-order, and post-order traversals of a binary tree.

Input:
A binary tree.

Output:
The elements visited during each traversal.

Example:
Input:
     1
    / \
   2   3
  / \
 4   5
Output:
In-order Traversal: 4 -> 2 -> 5 -> 1 -> 3
Pre-order Traversal: 1 -> 2 -> 4 -> 5 -> 3
Post-order Traversal: 4 -> 5 -> 2 -> 3 -> 1

2. Problem: Breadth-First Search (BFS) on Graph

Problem Statement:
Implement the breadth-first search (BFS) algorithm to traverse a graph and print the order of visited vertices.

Input:
A graph represented as an adjacency list.

Output:
The order of visited vertices during BFS traversal.

Example:
Input:
Graph:
{
  A: [B, C],
  B: [D, E],
  C: [F],
  D: [],
  E: [],
  F: []
}
Output:
BFS Traversal: A -> B -> C -> D -> E -> F

3. Problem: Detect Cycle in a Directed Graph

Problem Statement:
Given a directed graph, determine if the graph contains a cycle.

Input:
A directed graph represented as an adjacency list.

Output:
True if the graph contains a cycle, otherwise false.

Example:
Input:
Graph:
{
  A: [B],
  B: [C],
  C: [A]
}
Output:
true

