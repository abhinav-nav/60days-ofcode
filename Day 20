Day 20: Dynamic Programming
1. Problem: Best Time to Buy and Sell Stock

Problem Statement:
You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Input:
An array prices where prices[i] is the price of the stock on the ith day.

Output:
The maximum profit that can be achieved.

Example:
Input:
prices = [7,1,5,3,6,4]
Output:
5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.

2.  Problem: Combination Sum

Problem Statement:
Given a set of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination, and the result set should not contain duplicate combinations.

Input:
A set of candidate numbers (candidates) and a target number (target).

Output:
A list of all unique combinations in candidates where the candidate numbers sum to target.

Example:
Input:
candidates = [2,3,6,7], target = 7
Output:
[[7], [2,2,3]]


3. Problem: Maximum Subarray Sum Circular

Problem Statement:
Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

Input:
A circular integer array nums.

Output:
The maximum possible sum of a non-empty subarray.

Example:
Input:
nums = [1,-2,3,-2]
Output:
3
