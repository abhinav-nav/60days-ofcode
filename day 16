#Day 16: Dynamic Programming
1. Problem: Palindrome Number

Problem Statement:
Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Input:
An integer.

Output:
True if the integer is a palindrome, otherwise false.

Example:
Input:
121
Output:
True

This problem checks whether an integer is a palindrome, which is different from the previously provided easy-level problem.

2. Problem: Unique Paths

Problem Statement:
A robot is located at the top-left corner of a m x n grid. The robot can only move either down or right at any point in time. How many unique paths are there to reach the bottom-right corner of the grid?

Input:
Two integers m and n representing the size of the grid.

Output:
The number of unique paths to reach the bottom-right corner.

Example:
Input:
m = 3, n = 7
Output:
28

3. Problem Statement:
Given a m x n grid filled with non-negative numbers, find a path from the top-left corner to the bottom-right corner, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time.

Input:
A m x n grid filled with non-negative integers.

Output:
The minimum sum of all numbers along the path from the top-left corner to the bottom-right corner.

Example:
Input:
grid = [
[1,3,1],
[1,5,1],
[4,2,1]
]
Output:
7
Explanation: Path 1→3→1→1→1 minimizes the sum to 7.
